{
  "src/lib/components/Card.js": {
    "description": "Card",
    "displayName": "Card",
    "methods": [],
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The inline styles"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "The children of the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The class of the element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Title of the card"
      }
    }
  },
  "src/lib/components/Column.js": {
    "description": "Row Column",
    "displayName": "Column",
    "methods": [],
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The inline styles"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "The children of the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The class of the element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "columnSizes": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The size of the column with the display size, sm-4, lg-16 ...",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "offsetSizes": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The size of the offset with the display size, lg-2 ...",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/DatePicker.js": {
    "description": "DatePicker",
    "displayName": "DatePicker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "dateFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The date format."
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True to use the light version."
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The language locale used to format the days of the week, months, and numbers.\nThe full list of supported locales can be found here https://github.com/flatpickr/flatpickr/tree/master/src/l10n"
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The maximum date that a user can pick to."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The minimum date that a user can start picking from."
      },
      "short": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True to use the short version."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the date value provided to flatpickr"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Placeholder"
      },
      "labelText": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Label text"
      }
    }
  },
  "src/lib/components/DatePickerRange.js": {
    "description": "DatePickerRange",
    "displayName": "DatePickerRange",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "dateFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The date format."
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True to use the light version."
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The language locale used to format the days of the week, months, and numbers.\nThe full list of supported locales can be found here https://github.com/flatpickr/flatpickr/tree/master/src/l10n"
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The maximum date that a user can pick to."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The minimum date that a user can start picking from."
      },
      "short": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True to use the short version."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the date value provided to flatpickr"
      },
      "startLabel": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Start input label"
      },
      "endLabel": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "End input label"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "placeholder"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      }
    }
  },
  "src/lib/components/Grid.js": {
    "description": "Carbon Grid",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The inline styles"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "The children of the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The class of the element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/MultiSelect.js": {
    "description": "MultiSelect",
    "displayName": "MultiSelect",
    "methods": [],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the control"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the locale of the control.\nUsed for the default compareItems used for sorting the list of items in the control."
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "true to use the light version."
      },
      "selectionFeedback": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'fixed'",
              "computed": false
            },
            {
              "value": "'top-after-reopen'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify feedback (mode) of the selection.\ntop: selected item jumps to top\nfixed: selected item stays at it's position\ntop-after-reopen: selected item jump to top after reopen dropdown\ndefault top-after-reopen"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom, top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the direction of the multiselect dropdown. Can be either top or bottom.\ndefault bottom"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Id of the element"
      },
      "invalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is the current selection invalid."
      },
      "invalidText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text to show if it is invalid."
      },
      "items": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": true,
        "description": "List of items"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Generic label that will be used as the textual representation of what this field is for"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the size of the ListBox. Currently supports either sm, lg or xl as an option."
      },
      "titleText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide text to be used in a <label> element that is tied to the multiselect via ARIA attributes."
      },
      "selectedItems": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The list of the selected items",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      }
    }
  },
  "src/lib/components/MultiSelectFilterable.js": {
    "description": "MultiSelect",
    "displayName": "MultiSelectFilterable",
    "methods": [],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the control"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the locale of the control.\nUsed for the default compareItems used for sorting the list of items in the control."
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "true to use the light version."
      },
      "selectionFeedback": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'fixed'",
              "computed": false
            },
            {
              "value": "'top-after-reopen'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify feedback (mode) of the selection.\ntop: selected item jumps to top\nfixed: selected item stays at it's position\ntop-after-reopen: selected item jump to top after reopen dropdown\ndefault top-after-reopen"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom, top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the direction of the multiselect dropdown. Can be either top or bottom.\ndefault bottom"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Id of the element"
      },
      "invalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is the current selection invalid."
      },
      "invalidText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text to show if it is invalid."
      },
      "items": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": true,
        "description": "List of items"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Generic label that will be used as the textual representation of what this field is for"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the size of the ListBox. Currently supports either sm, lg or xl as an option."
      },
      "titleText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide text to be used in a <label> element that is tied to the multiselect via ARIA attributes."
      },
      "selectedItems": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The list of the selected items",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      }
    }
  },
  "src/lib/components/NumberInput.js": {
    "description": "",
    "displayName": "NumberInput",
    "methods": [],
    "props": {
      "allowEmpty": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`true` to allow empty string.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "style of the input"
      },
      "ariaLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a description that would be used to best describe the use case of the NumberInput component",
        "defaultValue": {
          "value": "'Numeric input field with increment and decrement buttons'",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the wrapper node"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Optional starting value for uncontrolled state"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the control should be disabled, or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "helperText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the underlying label to be visually hidden",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "iconDescription": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a description for up/down icons that can be read by screen readers",
        "defaultValue": {
          "value": "'choose a number'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Specify a custom `id` for the input"
      },
      "invalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the currently value is invalid.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "invalidText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Message which is displayed if the value is invalid.",
        "defaultValue": {
          "value": "'Provide invalidText'",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Generic `label` that will be used as the textual representation of what\nthis field is for"
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`true` to use the light version.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum value."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the component should be read-only"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the size of the Number Input. Currently supports either `sm` or `xl` as an option."
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify how much the valus should increase/decrease upon clicking on up/down button",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Specify the value of the input"
      },
      "warn": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control is currently in warning state",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "warnText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the text that is displayed when the control is in warning state",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by dash"
      }
    }
  },
  "src/lib/components/Row.js": {
    "description": "Grid Row",
    "displayName": "Row",
    "methods": [],
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The inline styles"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "The children of the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The class of the element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Slider.js": {
    "description": "Slider",
    "displayName": "Slider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Form item name"
      },
      "inputType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The form element type",
        "defaultValue": {
          "value": "'number'",
          "computed": false
        }
      },
      "ariaLabelInput": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA label for the <input>",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelText": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Label text"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Light variant",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hideTextInput": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Without text input",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The value"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The minimum value"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The maximum value"
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The step"
      },
      "stepMultiplier": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The step factor for Shift+arrow keys",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      }
    }
  },
  "src/lib/components/Tab.js": {
    "description": "",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be added to your Tab"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether your Tab is disabled."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide the contents of your Tab"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an accessibility role for your Tab"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value of the tab"
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Tab content"
      }
    }
  },
  "src/lib/components/Tabs.js": {
    "description": "Tabs",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "getTabs",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getTabAt",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTabClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleTabKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleTabAnchorFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDropdownClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "selectTabAt",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "ariaLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the text to be read by screen-readers when visiting the <Tabs>\ncomponent",
        "defaultValue": {
          "value": "'listbox'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Pass in a collection of <Tab> children to be rendered depending on the\ncurrently selected tab"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a className that is applied to the root <nav> component for the\n<Tabs>"
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Tab content is hidden"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "By default, this value is \"navigation\". You can also provide an alternate\nrole if it makes sense from the accessibility-side",
        "defaultValue": {
          "value": "'navigation'",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is invoked when a <Tab> is\nclicked"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Optionally provide an `onKeyDown` handler that is invoked when keyed\nnavigation is triggered"
      },
      "triggerHref": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a string that represents the `href` for the triggered <Tab>",
        "defaultValue": {
          "value": "'#'",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Optionally provide an index for the currently selected <Tab>"
      },
      "iconDescription": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a description that is read out when a user visits the caret icon\nfor the dropdown menu of items",
        "defaultValue": {
          "value": "'show menu options'",
          "computed": false
        }
      },
      "tabContentClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a className that is applied to the <TabContent> components"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "headerOffsets": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Number of columns of left offset the header will have"
      },
      "headerSizes": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Number of columns the header will have"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value of the selected tab"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      }
    }
  },
  "src/lib/components/UIShell.js": {
    "description": "UIShell is a default layout with the header and a sidebar",
    "displayName": "UIShell",
    "methods": [
      {
        "name": "getSideMenuItems",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "items",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getHeaderMenuItems",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "items",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Element id"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Platform Name"
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Content of the dashboard"
      },
      "sidebarItems": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "name": {
                "name": "string",
                "required": false
              },
              "url": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Items of the sidebar",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "headerItems": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "name": {
                "name": "string",
                "required": false
              },
              "url": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Items of the header",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Prop passed by Dash"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      }
    }
  }
}