% Auto-generated: do not edit by hand
\name{numberInput}

\alias{numberInput}

\title{NumberInput component}

\description{
NumberInput component
}

\usage{
numberInput(allowEmpty=NULL, style=NULL, ariaLabel=NULL, className=NULL,
defaultValue=NULL, disabled=NULL, helperText=NULL,
hideLabel=NULL, iconDescription=NULL, id=NULL, invalid=NULL,
invalidText=NULL, label=NULL, light=NULL, max=NULL,
min=NULL, readOnly=NULL, size=NULL, step=NULL, value=NULL,
warn=NULL, warnText=NULL)
}

\arguments{
\item{allowEmpty}{Logical. `true` to allow empty string.}

\item{style}{Named list. style of the input}

\item{ariaLabel}{Character. Provide a description that would be used to best describe the use case of the NumberInput component}

\item{className}{Character. Specify an optional className to be applied to the wrapper node}

\item{defaultValue}{Numeric | character. Optional starting value for uncontrolled state}

\item{disabled}{Logical. Specify if the control should be disabled, or not}

\item{helperText}{Character. Provide text that is used alongside the control label for additional help}

\item{hideLabel}{Logical. Specify whether you want the underlying label to be visually hidden}

\item{iconDescription}{Character. Provide a description for up/down icons that can be read by screen readers}

\item{id}{Character. Specify a custom `id` for the input}

\item{invalid}{Logical. Specify if the currently value is invalid.}

\item{invalidText}{Character. Message which is displayed if the value is invalid.}

\item{label}{Character. Generic `label` that will be used as the textual representation of what
this field is for}

\item{light}{Logical. `true` to use the light version.}

\item{max}{Numeric. The maximum value.}

\item{min}{Numeric. The minimum value.}

\item{readOnly}{Logical. Specify if the component should be read-only}

\item{size}{A value equal to: 'sm', 'xl'. Specify the size of the Number Input. Currently supports either `sm` or `xl` as an option.}

\item{step}{Numeric. Specify how much the valus should increase/decrease upon clicking on up/down button}

\item{value}{Numeric | character. Specify the value of the input}

\item{warn}{Logical. Specify whether the control is currently in warning state}

\item{warnText}{Character. Provide the text that is displayed when the control is in warning state}
}

\value{named list of JSON elements corresponding to React.js properties and their values}

